package Notes;

public class Note {
	public static void main(String[] args) {
		int age = 25; 
		double price = 100.5;
		
		String name = "A";
		
	}
/*
 * 변수는 스택 영역에, 객체/배열/함수는 힙 영역에 생성된다. 
 * 	age, price			name
 * 
 * NullpointerException: 참조 타입 변수를 잘못 사용하면 발생. 
 * 참조 타입 변수가 null을 가지고 있을 경우, 참조타입 변수는 사용 불가.
* 참조타입 변수를 사용(=객체 사용) 한다는 것인데, 참조 변수가 null을 가지고 있으면 해당 객체를 사용할 수가 없게 됨.  
 * 
 * 기본타입(byte, char, short, long, float, double, boolean) 은 항목에 직접 값을 가지고 있지만 
 * 참조타입(class, interface) 은 각 항목에 객체의 번지를 가지고 있다. 
 * ==> String a = "a"; 라고 할 때, a는 String 객체의 주소값 안에 존재하는 것. (String 객체를 참조하는 것)
 * ==> 항목 간에 문자열을 비교하기 위해서는, ==  로는 주소값이 다르기 때문에 불가하며(객체의 번지를 비교하는 ==), .equals() 메소드를 통하여 문자열을 비교하여야 한다. 
 * 
 * 클래스 = 필드 + 메소드 
 * 		(명사) (동사)
 */
	
	
/* 현실세계에 있는 것(객체)을 ==> 객체모델링을 통하여 ===> 소프트웨어 객체로 가져오는 것 
 * 개발자가 ==> 설계도(클래스)를 통하여 객체를 만든다. 클래스를 통해 만들어진 객체는 해당 클래스의 인스턴스 라고 한다. 하나의 클래스로 부터 여러개의 객체(인스턴스)를 만들 수 있다. 
 *				클래스 변수 = new 클래스(); 
 *             객체는 heap 영역에 생성되고, 객체의 주소가 리턴된다. 리턴된 주소는 클래스 타입 변수에 저장되어 객체에 접근할 수 있게 된다. 
 * 클래스에는 객체를 생성할 수 있는 필드 + 메소드가 있다.  
 */
	
	
/*
 * 필드의 초기화 
 * 1) 필드를 선언할 때 초기값을 주거나 ==> 동일한 클래스로부터 생성되는 객체는 모두 같은 데이터를 갖게 된다 
 * 2) 필드를 선언한 후, 생성자에서 초기값을 주거나 ==> 객체 생성 시점에 생성자에 입력받은 값을 가져온다. 생성자의 매개값으로 값을 받아 초기화한다. 
 */

	/* 오버로딩 시, 파라미터 변수의 수만 다르고 필드 초기화 내용이 비슷한 경우, 생성자 간의 중복된 코드가 발생할 수 있다. 
	 * this.__ = 자신의 다른 생성자를 호출하는 코드. 호출되는 생성자의 실행이 끝나면 원래의 생성자로 돌아와서 다음 실행문을 진행한다. 
	 * 


	 * 
	 */
}
